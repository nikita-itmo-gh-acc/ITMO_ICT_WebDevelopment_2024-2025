{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"lab_1/task1/","title":"1 task","text":""},{"location":"lab_1/task1/#1-udp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u0438 UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:  \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:</p> <pre><code>import socket\n\nserv_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserv_socket.bind(('', 8080))\n\nmax_user_conn, listening = 1, True\nserv_response = b\"Hello, client\"\n\nwhile listening:\n    client_data, addr = serv_socket.recvfrom(1024)\n    if not client_data:\n        break\n    print(client_data)\n    serv_socket.sendto(serv_response, addr)\n\nserv_socket.close()\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</p> <pre><code>import sys\nimport socket\n\ntry:\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nexcept socket.error:\n    print('Failed to create socket')\n    sys.exit()\n\n\ngetting_data = True\nwhile getting_data:\n    message = bytes(input(), 'utf-8')\n    client_socket.sendto(message, ('localhost', 8080))\n    serv_response = client_socket.recv(1024)\n    if not serv_response:\n        client_socket.close()\n        break\n    print(serv_response)\n</code></pre>"},{"location":"lab_1/task2/","title":"2 task","text":""},{"location":"lab_1/task2/#2-tcp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u0438 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 (+ \u043c\u0430\u0442. \u0437\u0430\u0434\u0430\u0447\u0430)","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:  \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: </p> <pre><code>import sys\nimport socket\nimport math\n\ntry:\n    serv_socket = socket.socket()\n    serv_socket.bind(('', 4242))\nexcept socket.error:\n    print('Failed to create socket')\n    sys.exit()\n\nmax_conn_count, listening = 5, True\n\nserv_socket.listen(max_conn_count)\n\nwhile listening:\n    client_socket, addr = serv_socket.accept()\n    client_data = list(map(lambda x: int(x), client_socket.recv(1024).decode().split()))\n    if not client_data or len(client_data) != 3:\n        print(\"Invalid parameters for triangle area task\")\n        client_socket.close()\n        break\n    a, b, c = tuple(client_data)\n    p = (a + b + c) / 2\n    area = str(math.sqrt(p * (p - a) * (p - b) * (p - c)))\n    client_socket.send(bytes(area, 'utf-8'))\n\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</p> <pre><code>import sys\nimport socket\n\ntry:\n    client_sock = socket.socket()\nexcept socket.error:\n    print('Failed to create socket')\n    sys.exit()\n\n\nclient_sock.connect(('localhost', 4242))\nprint(\"Please write the lengths of triangle sides:\")\nclient_sock.send(bytes(input(), 'utf-8'))\nres = client_sock.recv(1024)\nprint(f\"Area = {res.decode()}\")\nclient_sock.close()\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0441\u0440\u0435\u0434\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0435 \u0431\u044b\u043b\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u0413\u0435\u0440\u043e\u043d\u0430, \u043d\u043e \u043e\u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u043c\u043d\u0435 \u0441\u043b\u0435\u0433\u043a\u0430 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u0435\u0435 \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430</p>"},{"location":"lab_1/task3/","title":"3 task","text":""},{"location":"lab_1/task3/#3-http","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u0438 HTTP","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:  \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: </p> <pre><code>import sys\nimport socket\n\ntry:\n    serv_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    serv_socket.bind(('', 8888))\nexcept socket.error:\n    print('Failed to create socket')\n    sys.exit()\n\nmax_conn_count = 5\n\nserv_socket.listen(max_conn_count)\nlistening = True\n\nwhile listening:\n    conn_socket, addr = serv_socket.accept()\n    request_msg = conn_socket.recv(1024).decode().split()\n    if request_msg[0] != \"GET\":\n        print(\"Invalid HTTP request\")\n        conn_socket.send(b'HTTP/1.1 400 Bad Request')\n        conn_socket.close()\n        break\n    with open('templates/index.html', 'r') as index:\n        html = index.read()\n    response = 'HTTP/1.1 200 OK\\n' \\\n               'Server: My own\\n' \\\n               'Content-Type: text/html; charset=utf-8\\n'\\\n               f'Content-Length: {len(html)}'\\\n               'Allow: GET\\n\\n' \\\n               f'{html}'\n    conn_socket.send(response.encode('utf-8'))\n    conn_socket.close()\n\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</p> <pre><code>import http.client\n\nhost = 'localhost'\nclient_conn = http.client.HTTPConnection(host, 8888)\nclient_conn.request('GET', 'index.html')\nserv_response = client_conn.getresponse()\nprint(serv_response.read().decode())\n\n</code></pre>"},{"location":"lab_1/task4/","title":"4 task","text":""},{"location":"lab_1/task4/#4-tcp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043e\u043a\u0435\u0442\u043e\u0432 \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP (+ \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c)","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:  \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:</p> <pre><code>import sys\nimport socket\nimport threading\nfrom copy import copy\n\n\nmax_conn_count = 10\nlocker = threading.Lock()\nlistening = True\nthreads = []\nconnections = []\n\n\ndef threaded_handle(conn, address):\n    while True:\n        data = conn.recv(1024)\n        if not data:\n            conn.close()\n            print(f\"{address} connection interrupted\")\n            break\n        msg = address[0] + \":\" + str(address[1]) + \" said \" + data.decode()\n        print(msg)\n        with locker:\n            conn_copy = copy(connections)\n        for c in conn_copy:\n            c.sendall(msg.encode('utf-8'))\n\n\ndef main():\n    try:\n        serv_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        serv_socket.bind(('', 9090))\n    except socket.error:\n        print('Failed to create socket')\n        sys.exit()\n\n    serv_socket.listen(max_conn_count)\n\n    while listening:\n        conn_socket, addr = serv_socket.accept()\n        conn_thread = threading.Thread(target=threaded_handle, args=(conn_socket, addr,))\n        threads.append(conn_thread)\n        connections.append(conn_socket)\n        conn_thread.start()\n\n    for t in threads:\n        t.join()\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</p> <pre><code>import sys\nimport socket\nimport threading\n\ngetting_msg, host, port = True, 'localhost', 9090\nclient_locker = threading.Lock()\n\n\ndef show_chat(sock):\n    while True:\n        with client_locker:\n            serv_data = sock.recv(1024)\n        if not serv_data:\n            with client_locker:\n                sock.close()\n            print(\"Connection closed\")\n            break\n        print(serv_data.decode())\n\n\ndef main_client():\n    try:\n        client_sock = socket.socket()\n    except socket.error:\n        print('Failed to create socket')\n        sys.exit()\n\n    client_sock.connect((host, port))\n    chat_thread = threading.Thread(target=show_chat, args=(client_sock,))\n    chat_thread.start()\n\n    while getting_msg:\n        new_msg = input().encode('utf-8')\n        client_sock.send(new_msg)\n\n    chat_thread.join()\n\n\nif __name__ == \"__main__\":\n    main_client()\n\n</code></pre>"},{"location":"lab_1/task5/","title":"5 task","text":""},{"location":"lab_1/task5/#5-web-get-post","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: WEB-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:  \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. C\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:</p> <pre><code>import socket\nimport json\nfrom bs4 import BeautifulSoup as bs\nfrom urllib.parse import urlparse, parse_qs\nfrom datetime import datetime\n\nmax_headers = 100\n\n\nclass HTTPRequest:\n    def __init__(self, method, url, version, headers, r_body):\n        self.method = method\n        self.url = url\n        self.version = version\n        self.headers = headers\n        self.body = r_body\n\n    @property\n    def parsed_url(self):\n        return urlparse(self.url)\n\n    @property\n    def query(self):\n        return parse_qs(self.parsed_url.query)\n\n\nclass HTTPResponse:\n    def __init__(self, code, status, version, headers=None, body=None):\n        self.code = code\n        self.status = status\n        self.version = version\n        self.headers = headers\n        self.body = body\n\n    def compile(self):\n        resp = f\"{self.version} {self.code} {self.status}\\n\"\n        if self.headers:\n            for header, value in self.headers.items():\n                resp += f\"{header}: {value}\\n\"\n        if self.body:\n            resp += f\"\\n{self.body}\"\n        return resp\n\n\ndef compile_html(req, filename, json_file):\n    soup = bs(open(filename, 'r+'), \"html.parser\")\n    caption = soup.find('h2', {'id': 'subj_name'})\n    mark_list = soup.find('ul', {'id': 'marks'})\n    try:\n        subj = req.query['subject'][0]\n        caption.string = f\"{subj} grades:\"\n        with open(json_file, 'r') as grades_file:\n            subjects = json.load(grades_file)\n            marks = subjects[subj]\n        for mark in marks:\n            mark_li = soup.new_tag('li')\n            mark_li.string = mark\n            mark_list.append(mark_li)\n        return soup.prettify('utf-8').decode()\n    except KeyError:\n        raise Exception(\"Wrong request parameters\")\n\n\nclass HTTPServer:\n    def __init__(self, ip, port):\n        self.ip = ip\n        self.port = port\n        self.name = \"MyHTTPServer\"\n        self.http_v = \"HTTP/1.1\"\n\n    def serve_forever(self):\n        serv_sock = socket.socket()\n        serv_sock.bind((self.ip, self.port))\n        serv_sock.listen()\n        try:\n            while True:\n                conn_socket, addr = serv_sock.accept()\n                self.serve_client(conn_socket)\n        finally:\n            serv_sock.close()\n\n    def serve_client(self, connection):\n        req = self.parse_request(connection)\n        if req:\n            resp = self.handle_request(req).compile()\n            resp_encoded = resp.encode()\n            connection.sendall(resp_encoded)\n        connection.close()\n\n    def parse_request(self, connection):\n        with connection.makefile('rb') as req_file:\n            raw_first_line = req_file.readline()\n            first_line = str(raw_first_line, 'utf-8')\n            method, url, version = first_line.split()\n            headers = self.parse_headers(req_file)\n            return HTTPRequest(method, url, version, headers, req_file)\n\n    def parse_headers(self, rfile):\n        headers = dict()\n        while len(headers) &lt;= max_headers:\n            r_line = rfile.readline().decode('utf-8')\n            if r_line == '\\n' or r_line == '' or r_line == '\\r\\n':\n                return headers\n            header, value = tuple(r_line.split())\n            headers[header] = value\n        raise Exception('too many headers')\n\n    def handle_request(self, req):\n        if req.parsed_url.path == \"/grades\":\n            if req.method == \"GET\":\n                html = compile_html(req, \"templates/lab1_5.html\",\n                                    \"../students/K3340/Ananiev_Nikita/LR1/json_files/grades.json\")\n                resp_headers = {\n                    \"Server\": self.name,\n                    \"Date\": str(datetime.now()),\n                    \"Content-Length\": len(html),\n                    \"Content-Type\": \"text/html; charset=utf-8\"\n                }\n                return HTTPResponse(200, \"OK\", self.http_v, resp_headers, html)\n            elif req.method == \"POST\":\n                with open(\"json_files/grades.json\", \"r+\") as grades_file:\n                    subjects = json.load(grades_file)\n                    try:\n                        subjects[req.query[\"subject\"][0]].append(req.query[\"mark\"][0])\n                    except KeyError:\n                        raise Exception(\"Wrong request parameters\")\n                    grades_file.seek(0)\n                    json.dump(subjects, grades_file)\n                    grades_file.truncate()\n                return HTTPResponse(204, \"Created\", self.http_v)\n        else:\n            return HTTPResponse(400, \"Bad Request\", self.http_v)\n\n\nif __name__ == '__main__':\n    host = '127.0.0.1'\n    _port = 7878\n    serv = HTTPServer(host, _port)\n    try:\n        serv.serve_forever()\n    except KeyboardInterrupt:\n        pass\n\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:</p> <pre><code>import os\nimport http.client\nimport webbrowser\n\n\nclass HTTPClient:\n    def __init__(self):\n        self.conn = None\n\n    def connect_to(self, ip, port):\n        self.conn = http.client.HTTPConnection(ip, port)\n\n    def post_mark(self, subj, grade):\n        if not self.conn:\n            raise Exception('No connection provided')\n        self.conn.request('POST', f\"/grades?subject={subj}&amp;mark={grade}\")\n        serv_response = self.conn.getresponse()\n        print(serv_response.status, serv_response.reason)\n\n    def get_marks(self, subj):\n        if not self.conn:\n            raise Exception('No connection provided')\n        self.conn.request('GET', f\"/grades?subject={subj}\")\n        serv_response = self.conn.getresponse()\n        path = \"templates/lab1_5client.html\"\n        body = serv_response.read()\n        with open(path, \"wb\") as cli_html:\n            cli_html.write(body)\n        webbrowser.open('file://' + os.path.realpath(path), new=2)\n\n\nif __name__ == \"__main__\":\n    _ip, _port = '127.0.0.1', 7878\n    client = HTTPClient()\n    while True:\n        client.connect_to(_ip, _port)\n        subject = input(\"Choose subject:\")\n        choice = int(input(\"Choose POST mark(1) or GET marks(2):\"))\n        if choice == 1:\n            mark = int(input(\"input mark(1-5):\"))\n            client.post_mark(subject, mark)\n            continue\n        client.get_marks(subject)\n\n</code></pre>"},{"location":"lab_2/booking/","title":"bookings","text":""},{"location":"lab_2/booking/#bookings","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Bookings.","text":""},{"location":"lab_2/booking/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438.","text":""},{"location":"lab_2/booking/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438:","text":"<pre><code>class Booking(models.Model):\n    start_date = models.DateField(null=False)\n    end_date = models.DateField(null=False)\n    person_count = models.PositiveIntegerField(null=False, default=1)\n    checked_in = models.BooleanField(default=False)\n    finished = models.BooleanField(default=False)\n    add_info = models.TextField()\n    client = ForeignKey(HotelBaseAccount, on_delete=models.CASCADE)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(end_date__gt=models.F(\"start_date\")), name=\"start_end_check\")]\n\n    def __str__(self):\n        return f\"Booking | from {self.start_date} to {self.end_date}| {self.client.firstname} {self.client.lastname}\"\n\n\nclass Review(models.Model):\n    date = models.DateField(auto_now_add=True)\n    rate = models.IntegerField(null=False)\n    description = models.TextField()\n    client = models.ForeignKey(HotelBaseAccount, on_delete=models.CASCADE)\n    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE)\n\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(rate__lte=10), name='rate less than 10'),\n                       models.CheckConstraint(condition=models.Q(rate__gte=1), name='rate more than 1')]\n\n    def __str__(self):\n        return f\"Review | from {self.date} by {self.client.firstname} {self.client.lastname}\"\n</code></pre>"},{"location":"lab_2/booking/#urls","title":"URLs:","text":"<pre><code>urlpatterns = [\n    path('add_booking/&lt;int:room_id&gt;', views.CreateBookingView.as_view(), name='add_booking'),\n    path('my_bookings/', views.ListBookingView.as_view(), name='my_bookings'),\n    path('my_bookings/delete/&lt;int:pk&gt;', views.delete_booking, name='delete_booking'),\n    path('my_bookings/update/&lt;int:pk&gt;', views.UpdateBookingView.as_view(), name='update_booking'),\n]\n</code></pre>"},{"location":"lab_2/booking/#_3","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f:","text":"<pre><code>class CreateBookingView(LoginRequiredMixin, CreateView):\n    model = Booking\n    template_name = \"add_booking.html\"\n\n    def get(self, request, *args, **kwargs):\n        room = Room.objects.get(pk=kwargs['room_id'])\n        request.session.setdefault(\"success_url\", get_next_url(request))\n        request.session['room_num'] = room.number\n        return render(request, self.template_name, {'form': BookingForm(), 'room_num': request.session['room_num']})\n\n    def post(self, request, *args, **kwargs):\n        form = BookingForm(request.POST)\n        if form.is_valid():\n            start, end = form.cleaned_data['start_date'], form.cleaned_data['end_date']\n            intersections = Booking.objects.filter(Q(room_id=kwargs['room_id']) &amp; Q(start_date__lte=end) &amp; Q(end_date__gte=start))\n            if intersections.exists():\n                return render(request, self.template_name,\n                              {'form': BookingForm(), 'error_msg': 'Found intersections, please choose other dates',\n                               'room_num': request.session['room_num']})\n            form.instance.client = request.user\n            form.instance.room = Room.objects.get(pk=kwargs['room_id'])\n            form.save()\n            next_url = request.session['success_url']\n            del request.session['success_url']\n            del request.session['room_num']\n            return redirect(next_url)\n        return render(request, self.template_name, {'form': BookingForm(), 'room_num': request.session['room_num']})\n\n\nclass ListBookingView(LoginRequiredMixin, ListView):\n    model = Booking\n    template_name = \"user_bookings.html\"\n    context_object_name = 'bookings'\n    paginate_by = 5\n\n    def get_queryset(self):\n        return self.request.user.booking_set.all()\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"today\"] = date.today()\n        return context\n\n\nclass UpdateBookingView(LoginRequiredMixin, UpdateView):\n    model = Booking\n    template_name = \"update_booking.html\"\n    fields = ['start_date', 'end_date', 'add_info']\n    success_url = \"/my_bookings/\"\n\n\n@login_required\n@csrf_exempt\ndef delete_booking(request, pk):\n    if request.method == 'DELETE':\n        booking = Booking.objects.get(pk=pk)\n        booking.delete()\n        return JsonResponse({'success': True})\n    return JsonResponse({'success': False})\n</code></pre>"},{"location":"lab_2/hotels/","title":"hotel_logic","text":""},{"location":"lab_2/hotels/#hotel_app","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Hotel_app.","text":""},{"location":"lab_2/hotels/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0431 \u043e\u0442\u0435\u043b\u044f\u0445 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430\u0445.","text":""},{"location":"lab_2/hotels/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438:","text":"<pre><code>class Hotel(models.Model):\n    name = models.CharField(max_length=128, unique=True, null=False)\n    address = models.CharField(max_length=128, null=False)\n    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=False)\n    description = models.TextField()\n\n    @property\n    def first_picture(self):\n        return self.hotelpicture_set.first()\n\n    def __str__(self):\n        return f\"{self.name}. Address: {self.address}\"\n\n\nclass Room(models.Model):\n    number = models.PositiveIntegerField(null=False)\n    area = models.CharField(max_length=128, null=False)\n    day_price = models.PositiveIntegerField(null=False)\n    peculiarities = models.TextField()\n    max_person_count = models.PositiveIntegerField(default=2)\n    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=False)\n    types = models.ManyToManyField('RoomType')\n\n    @property\n    def first_picture(self):\n        return self.roompicture_set.first()\n\n    def __str__(self):\n        return f\"Room {self.number} in the {self.hotel} hotel. Area {self.area}\"\n\n\nclass RoomType(models.Model):\n    type = models.CharField(max_length=128, unique=True, null=False)\n    description = models.TextField()\n\n    def __str__(self):\n        return f\"Room type: {self.type}. {self.description}\"\n\n\nclass HotelPicture(models.Model):\n    title = models.CharField(max_length=128)\n    image = models.ImageField(upload_to='images/%Y/%m/%d')\n    upload_date = models.DateTimeField(auto_now_add=True)\n    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=False)\n\n    def __str__(self):\n        return f\"Hotel picture {self.title}\"\n\n\nclass RoomPicture(models.Model):\n    title = models.CharField(max_length=128)\n    image = models.ImageField(upload_to='images/%Y/%m/%d')\n    upload_date = models.DateTimeField(auto_now_add=True)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, null=False)\n\n    def __str__(self):\n        return f\"Room picture {self.title}\"\n</code></pre>"},{"location":"lab_2/hotels/#urls","title":"URLs:","text":"<pre><code>urlpatterns = [\n    path('', views.MainView.as_view(), name='main_page'),\n    path('hotel/&lt;int:pk&gt;/', views.HotelDetailView.as_view(), name=\"hotel_details\"),\n    path('hotel/&lt;int:pk&gt;/room/', views.RoomListView.as_view(), name=\"room_list\"),\n    path('hotel/', views.HotelListView.as_view(), name=\"hotel_list\"),\n    path('hotel/&lt;int:pk&gt;/room/&lt;int:id&gt;/', views.RoomDetailView.as_view(), name=\"room_details\"),\n    path('hotel/&lt;int:pk&gt;/residents/', views.ResidentsListView.as_view(), name=\"resident_list\"),\n]\n</code></pre>"},{"location":"lab_2/hotels/#_3","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f:","text":"<pre><code>class HotelListView(ListView):\n    model = Hotel\n    template_name = \"hotel_list.html\"\n    context_object_name = 'hotels'\n    paginate_by = 4\n\n\nclass HotelDetailView(LoginRequiredMixin, DetailView):\n    model = Hotel\n    template_name = \"hotel.html\"\n    context_object_name = \"hotel\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"review_list\"] = Review.objects.filter(hotel__name=self.object.name)\n        context[\"pictures\"] = self.object.hotelpicture_set.all()\n        context[\"form\"] = ReviewForm()\n        return context\n\n    def post(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        form = ReviewForm(request.POST)\n        if form.is_valid():\n            form.instance.client = request.user\n            form.instance.hotel = Hotel.objects.get(pk=kwargs['pk'])\n            form.save()\n            return redirect(f\"/hotel/{kwargs['pk']}\")\n        context = self.get_context_data(**kwargs)\n        errors = [form.errors[field].as_text() for field in form.errors]\n        context[\"errors\"] = errors\n        return render(request, self.template_name, context)\n\n\nclass RoomListView(LoginRequiredMixin, ListView):\n    model = Room\n    context_object_name = 'rooms'\n    template_name = 'room_list.html'\n    paginate_by = 5\n\n    def get_queryset(self):\n        return Room.objects.filter(hotel__id=self.kwargs['pk'])\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"hotel\"] = Hotel.objects.get(pk=self.kwargs['pk'])\n        return context\n\n\nclass RoomDetailView(LoginRequiredMixin, DetailView):\n    model = Room\n    template_name = \"room.html\"\n    context_object_name = \"room\"\n\n    def get_object(self, queryset=None):\n        id_ = self.kwargs.get(\"id\", None)\n        try:\n            return Room.objects.get(pk=id_)\n        except:\n            raise Http404('No such room')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"types\"] = self.object.types.all()\n        context[\"available\"] = True\n        context[\"room_id\"] = self.object.pk\n        context[\"pictures\"] = self.object.roompicture_set.all()\n        unfinished_booking = self.object.booking_set.filter(Q(finished=False) &amp; Q(start_date__lte=timezone.now()) &amp; Q(end_date__gte=timezone.now()))\n        if unfinished_booking:\n            context[\"available\"] = False\n        return context\n\nclass ResidentsListView(LoginRequiredMixin, PermissionRequiredMixin, ListView):\n    model = HotelBaseAccount\n    template_name = \"residents_list.html\"\n    permission_required = 'auth.can_see_residents_table'\n    context_object_name = 'residents_bookings'\n    paginate_by = 10\n\n    def get_queryset(self):\n        bookings = Booking.objects.filter(start_date__gte=datetime.datetime.today() - datetime.timedelta(days=30), room__hotel__id=self.kwargs.get(\"pk\"))\n        return bookings\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n\n\nclass MainView(View):\n    def get(self, request):\n        return render(request, \"main.html\")\n</code></pre>"},{"location":"lab_2/main/","title":"main","text":""},{"location":"lab_2/main/#2","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439.","text":""},{"location":"lab_2/main/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p> </li> <li> <p>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439.</p> </li> <li> <p>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.</p> </li> <li> <p>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</p> </li> <li> <p>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.</p> </li> </ul>"},{"location":"lab_2/register/","title":"register","text":""},{"location":"lab_2/register/#register","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Register.","text":""},{"location":"lab_2/register/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443.","text":""},{"location":"lab_2/register/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438:","text":"<pre><code>    class HotelBaseAccount(AbstractBaseUser, PermissionsMixin):\n        email = models.EmailField(verbose_name='email_address', unique=True, max_length=200)\n        firstname = models.CharField(max_length=64, null=False)\n        lastname = models.CharField(max_length=64, null=False)\n        date_joined = models.DateTimeField(default=timezone.now)\n        birth_date = models.DateField(blank=True)\n        is_staff = models.BooleanField(default=False)\n        is_active = models.BooleanField(default=True)\n\n        USERNAME_FIELD = 'email'\n        REQUIRED_FIELDS = ['firstname', 'lastname']\n\n        objects = AccountManager()\n\n        @property\n        def is_admin(self):\n            return self.is_staff\n\n        def has_perm(self, perm, obj=None):\n            if perm == 'auth.can_see_residents_table':\n                return self.is_staff\n            return True\n\n        def has_module_perms(self, app_label):\n            return True\n\n        def get_absolute_url(self):\n            return \"/account/%i/\" % self.id\n\n        def __str__(self):\n            return f\"{self.firstname} {self.lastname}. \u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f: {self.birth_date}. \u044d\u043b. \u043f\u043e\u0447\u0442\u0430: {self.email}\"\n\n</code></pre>"},{"location":"lab_2/register/#urls","title":"URLs:","text":"<pre><code>urlpatterns = [\n    path(\"register/\", views.CreateAccount.as_view(), name=\"register_account\"),\n    path(\"register/admin/\", views.AdminCreateView.as_view(), name=\"register_admin\"),\n    path(\"login/\", views.account_login, name=\"login\"),\n    path(\"logout/\", views.account_logout, name=\"logout\"),\n]\n</code></pre>"},{"location":"lab_2/register/#_3","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f:","text":"<pre><code>class CreateAccount(CreateView):\n    model = HotelBaseAccount\n    form_class = AccountCreationForm\n    template_name = \"register.html\"\n    success_url = '/'\n\nclass AdminCreateView(CreateView):\n    model = HotelBaseAccount\n    form_class = AdminCreationForm\n    template_name = 'register.html'\n    success_url = '/'\n\ndef account_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if not form.is_valid():\n            return HttpResponse('Invalid login form.')\n        data = form.cleaned_data\n        account = authenticate(email=data['email'], password=data['password'])\n        if account is None or not account.is_active:\n            return HttpResponse('No such account found.')\n        login(request, account)\n        next_url = request.session['next_url']\n        del request.session['next_url']\n        return redirect(next_url)\n    else:\n        request.session['next_url'] = get_next_url(request)\n        form = LoginForm()\n    return render(request, \"login.html\", {'form': form})\n\n\ndef account_logout(request):\n    logout(request)\n    return redirect('/')\n\n\ndef get_next_url(request):\n    next_url = request.META.get('HTTP_REFERER')\n    if next_url:\n        return unquote(next_url)\n    if not url_has_allowed_host_and_scheme(url=next_url, allowed_hosts=[request.get_host()]):\n        return '/'\n    return next_url\n</code></pre>"},{"location":"lab_3/bookings/","title":"bookings","text":""},{"location":"lab_3/bookings/#booking_api","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 booking_api.","text":""},{"location":"lab_3/bookings/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u0432.","text":""},{"location":"lab_3/bookings/#modelspy","title":"models.py:","text":"<pre><code>from django.db import models\nfrom django.utils import timezone\n\nfrom hotel_api.models import Room\nfrom auth_api.models import UserAccount\n\nclass Booking(models.Model):\n    booking_date = models.DateField(null=False, default=timezone.now)\n    from_town = models.CharField(max_length=30)\n    check_in_time = models.DateTimeField(null=True)\n    departure_time = models.DateTimeField(null=True)\n    full_days = models.IntegerField(default=0)\n    state = models.CharField(max_length=30)\n    payment_status = models.CharField(max_length=30)\n    client = models.ForeignKey(UserAccount, on_delete=models.CASCADE, null=False, related_name='bookings')\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, null=False, related_name='bookings')\n\n    def __str__(self):\n        return f\"Booking from {self.booking_date} by {self.client.firstname} {self.client.lastname}, room {self.room.number}\"\n</code></pre>"},{"location":"lab_3/bookings/#serializerspy","title":"serializers.py:","text":"<pre><code>from rest_framework import serializers\nfrom .models import Booking\nfrom hotel_api.serializers import RoomSerializer\nfrom auth_api.serializers import CustomUserSerializer\n\n\nclass BookingDetailedSerializer(serializers.ModelSerializer):\n    client = CustomUserSerializer()\n    room = RoomSerializer()\n    class Meta:\n        model = Booking\n        fields = '__all__'\n\n\nclass BookingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Booking\n        fields = '__all__'\n\n\nclass BookingCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Booking\n        fields = ['client', 'room', 'booking_date', 'from_town']\n\n    def create(self, validated_data):\n        booking = Booking(**validated_data)\n        booking.payment_status = 'not paid'\n        booking.state = 'booked'\n        booking.save()\n        return Booking(**validated_data)\n\n\nclass BookingUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Booking\n        fields = ['check_in_time', 'departure_time', 'full_days', 'state', 'payment_status']\n        depth = 1\n</code></pre>"},{"location":"lab_3/bookings/#urlspy","title":"urls.py:","text":"<pre><code>urlpatterns = [\n    path('bookings/&lt;int:id&gt;/', BookingAPIView.as_view(), name='get_booking'),\n    path('bookings/list/', BookingListAPIView.as_view(), name='get_booking_list'),\n    path('bookings/add/', BookingCreateAPIView.as_view(), name='add_booking'),\n    path('bookings/&lt;int:id&gt;/update/', BookingUpdateAPIView.as_view(), name='update_booking'),\n    path('bookings/&lt;int:id&gt;/delete/', BookingDeleteAPIView.as_view(), name='delete_booking'),\n]\n</code></pre>"},{"location":"lab_3/employees/","title":"employees","text":""},{"location":"lab_3/employees/#work_api","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 work_api.","text":""},{"location":"lab_3/employees/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430\u043c\u0438/\u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c.","text":""},{"location":"lab_3/employees/#modelspy","title":"models.py:","text":"<pre><code>from django.db import models\nfrom django.utils import timezone\nfrom hotel_api.models import Room\n\n\nclass Employee(models.Model):\n    firstname = models.CharField(max_length=30, null=False)\n    lastname = models.CharField(max_length=30, null=False)\n    patronymic = models.CharField(max_length=30)\n    email = models.EmailField(null=False)\n    phone = models.CharField(max_length=15, null=False)\n\n    def __str__(self):\n        return f'Employee {self.firstname} {self.lastname}'\n\n\nclass Position(models.Model):\n    name = models.CharField(max_length=30, null=False)\n    description = models.TextField()\n\n    def __str__(self):\n        return f'Position {self.name} : {self.description}'\n\n\nclass SalaryHistory(models.Model):\n    salary = models.IntegerField(null=False)\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField(null=True)\n    position = models.ForeignKey('Position', on_delete=models.CASCADE, null=False, related_name='salary_history')\n\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(salary__gt=0), name='salary &gt; 0'),]\n\n\nclass Contract(models.Model):\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField(null=True)\n    working_status = models.CharField(max_length=30, null=False)\n    employee = models.ForeignKey('Employee', on_delete=models.CASCADE, null=False, related_name='contracts')\n    position = models.ForeignKey('Position', on_delete=models.CASCADE, null=False, related_name='contracts')\n\n    def __str__(self):\n        return f'Contract from {self.start_date}. Employee {self.employee.firstname} {self.position.name}'\n\n\nclass WorkSchedule(models.Model):\n    start_time = models.DateTimeField(null=False)\n    end_time = models.DateTimeField(null=True)\n    is_done = models.BooleanField(default=False)\n    contract = models.ForeignKey('Contract', on_delete=models.CASCADE, null=False, related_name='work_schedule')\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, null=False, related_name='work_schedule')\n</code></pre>"},{"location":"lab_3/employees/#serializerspy","title":"serializers.py:","text":"<pre><code>from rest_framework import serializers\nfrom .models import Employee, Contract, WorkSchedule, Position\nfrom hotel_api.serializers import RoomSerializer\n\n\nclass EmployeeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Employee\n        fields = '__all__'\n\n\nclass EmployeeCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Employee\n        fields = '__all__'\n\n    def create(self, validated_data):\n        employee = Employee(**validated_data)\n        employee.save()\n        return Employee(**validated_data)\n\n\nclass PositionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Position\n        fields = '__all__'\n\n\nclass ContractDetailedSerializer(serializers.ModelSerializer):\n    employee = EmployeeSerializer()\n    position = PositionSerializer()\n\n    class Meta:\n        model = Contract\n        fields = '__all__'\n\n\nclass ContractSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contract\n        fields = '__all__'\n        depth = 0\n\n\nclass ContractCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contract\n        exclude = ['end_date']\n\n    def create(self, validated_data):\n        contract = Contract(**validated_data)\n        contract.save()\n        return Contract(**validated_data)\n\n\nclass ContractUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contract\n        fields = ['end_date', 'working_status']\n\n\nclass ScheduleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WorkSchedule\n        fields = '__all__'\n        depth = 0\n\n\nclass ScheduleDetailedSerializer(serializers.ModelSerializer):\n    contract = ContractSerializer()\n    room = RoomSerializer()\n    class Meta:\n        model = WorkSchedule\n        fields = '__all__'\n\n\nclass ScheduleCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WorkSchedule\n        exclude = ['is_done']\n\n    def create(self, validated_data):\n        schedule = WorkSchedule(**validated_data)\n        schedule.save()\n        return WorkSchedule(**validated_data)\n\n\nclass ScheduleUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = WorkSchedule\n        fields = ['is_done']\n</code></pre>"},{"location":"lab_3/employees/#urlspy","title":"urls.py:","text":"<pre><code>urlpatterns = [\n    path('employees/&lt;int:id&gt;/', EmployeeAPIView.as_view(), name='get_employee'),\n    path('employees/list/', EmployeeListAPIView.as_view(), name='get_employee_list'),\n    path('employees/add/', EmployeeCreateAPIView.as_view(), name='add_employee'),\n    path('positions/&lt;int:id&gt;/', PositionAPIView.as_view(), name='get_position'),\n    path('positions/list/', PositionListAPIView.as_view(), name='get_position_list'),\n    path('contracts/&lt;int:id&gt;/', ContractAPIView.as_view(), name='get_contract'),\n    path('contracts/list/', ContractListAPIView.as_view(), name='get_contract_list'),\n    path('contracts/add/', ContractCreateAPIView.as_view(), name='add_contract'),\n    path('contracts/&lt;int:id&gt;/update/', ContractUpdateAPIView.as_view(), name='update_contract'),\n    path('contracts/&lt;int:id&gt;/delete/', ContractDeleteAPIView.as_view(), name='delete_contract'),\n    path('schedule/&lt;int:id&gt;/', ScheduleAPIView.as_view(), name='get_schedule'),\n    path('schedule/list/', ScheduleListAPIView.as_view(), name='get_schedule_list'),\n    path('schedule/add/', ScheduleCreateAPIView.as_view(), name='add_schedule'),\n    path('schedule/&lt;int:id&gt;/update/', ScheduleUpdateAPIView.as_view(), name='update_schedule'),\n    path('schedule/&lt;int:id&gt;/delete/', ScheduleDeleteAPIView.as_view(), name='delete_schedule'),\n]\n</code></pre>"},{"location":"lab_3/main/","title":"main","text":""},{"location":"lab_3/main/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u0435\u043c:","text":""},{"location":"lab_3/rooms/","title":"rooms","text":""},{"location":"lab_3/rooms/#hotel_api","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 hotel_api.","text":""},{"location":"lab_3/rooms/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u043e\u0442\u0435\u043b\u044f.","text":""},{"location":"lab_3/rooms/#modelspy","title":"models.py:","text":"<pre><code>from django.db import models\nfrom django.utils import timezone\n\n\nclass Room(models.Model):\n    number = models.CharField(unique=True, max_length=4)\n    area = models.IntegerField(null=False)\n    is_occupied = models.BooleanField(default=False)\n    is_cleaned = models.BooleanField(default=True)\n    floor = models.IntegerField(null=False)\n    room_type = models.ForeignKey('RoomType', on_delete=models.CASCADE, null=False, related_name='rooms')\n\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(number__regex=r'\\d{3,4}'), name='number_constraint'),\n                       models.CheckConstraint(condition=models.Q(floor__gte=0), name='floor_constraint'),]\n\n    def __str__(self):\n        return f\"room {self.number}, {self.area} sq meters, is_occupied: {self.is_occupied}\"\n\nclass RoomType(models.Model):\n    name = models.CharField(unique=True, max_length=30, null=False)\n    places = models.IntegerField(null=False)\n    description = models.TextField()\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(places__lte=4), name='places &lt;= 4'),\n                       models.CheckConstraint(condition=models.Q(places__gte=1), name='places &gt;= 1')]\n\n    def __str__(self):\n        return \"room type:\" + self.name\n\nclass RoomTypePrice(models.Model):\n    day_price = models.IntegerField(null=False)\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField()\n    room_type = models.ForeignKey('RoomType', on_delete=models.CASCADE, null=False, related_name='prices')\n\n    class Meta:\n        constraints = [models.CheckConstraint(condition=models.Q(day_price__gt=0), name='price &gt; 0'),]\n</code></pre>"},{"location":"lab_3/rooms/#serializerspy","title":"serializers.py:","text":"<pre><code>from rest_framework import serializers\nfrom .models import Room, RoomType\n\n\nclass RoomUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Room\n        fields = ['is_cleaned', 'is_occupied']\n\n\nclass RoomTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RoomType\n        fields = '__all__'\n\n\nclass RoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Room\n        fields = '__all__'\n\n\nclass RoomDetailedSerializer(serializers.ModelSerializer):\n    room_type = RoomTypeSerializer()\n    class Meta:\n        model = Room\n        fields = '__all__'\n</code></pre>"},{"location":"lab_3/rooms/#urlspy","title":"urls.py:","text":"<pre><code>urlpatterns = [\n    path('rooms/&lt;int:id&gt;/', RoomAPIView.as_view(), name='get_room'),\n    path('rooms/&lt;int:id&gt;/update', RoomUpdateAPIView.as_view(), name='update_room'),\n    path('rooms/list/', RoomListAPIView.as_view(), name='get_room_list'),\n    path('rooms/room_types/', RoomTypeListAPIView.as_view(), name='get_room_type_list'),\n]\n</code></pre>"},{"location":"lab_3/users/","title":"users","text":""},{"location":"lab_3/users/#auth_api","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 auth_api.","text":""},{"location":"lab_3/users/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435","text":""},{"location":"lab_3/users/#modelspy","title":"models.py:","text":"<pre><code>class UserAccount(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(verbose_name='email_address', unique=True, max_length=64)\n    firstname = models.CharField(max_length=30, null=False)\n    lastname = models.CharField(max_length=30, null=False)\n    patronymic = models.CharField(max_length=30, null=False)\n    phone = models.CharField(max_length=15, null=False)\n    date_joined = models.DateTimeField(default=timezone.now)\n    birth_date = models.DateField(blank=True)\n    is_staff = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['firstname', 'lastname', 'phone', 'birth_date']\n\n    objects = AccountManager()\n\n    class Meta:\n        verbose_name = 'user'\n        verbose_name_plural = 'users'\n\n    @property\n    def is_admin(self):\n        return self.is_staff\n\n    def has_perm(self, perm, obj=None):\n        return True\n\n    def has_module_perms(self, app_label):\n        return True\n\n    def __str__(self):\n        return f\"{self.firstname} {self.lastname}. \u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f: {self.birth_date}. \u044d\u043b. \u043f\u043e\u0447\u0442\u0430: {self.email}\"\n</code></pre>"},{"location":"lab_3/users/#serializerspy","title":"serializers.py:","text":"<pre><code>from rest_framework import serializers\nfrom .models import UserAccount\n\nclass CustomUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserAccount\n        fields = ['email', 'firstname', 'lastname', 'phone']\n\n\nclass UserUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserAccount\n        fields = ['email', 'firstname', 'lastname', 'phone', 'birth_date', 'password']\n</code></pre>"},{"location":"lab_3/users/#urlspy","title":"urls.py:","text":"<pre><code>urlpatterns = [\n    path(\"users/&lt;int:id&gt;/\", UserAPIView.as_view(), name=\"get_client\"),\n    path(\"users/list/\", UserListAPIView.as_view(), name=\"get_client_list\"),\n    path(\"users/&lt;int:id&gt;/update\", UserUpdateAPIView.as_view(), name=\"update_client\"),\n]\n</code></pre>"},{"location":"lab_3/endpoints/add_booking/","title":"bookings/add[POST]","text":""},{"location":"lab_3/endpoints/add_booking/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"lab_3/endpoints/add_booking/#url-bookingsadd","title":"URL: <code>/bookings/add/</code>","text":""},{"location":"lab_3/endpoints/add_booking/#method-post","title":"Method: <code>POST</code>","text":""},{"location":"lab_3/endpoints/add_booking/#permissions-isauthenticated","title":"Permissions: <code>IsAuthenticated</code>","text":""},{"location":"lab_3/endpoints/add_booking/#request-body-example","title":"Request Body example:","text":"<pre><code>{\n    \"client\": 5,\n    \"room\": 3,\n    \"booking_date\": 25.12.2024,\n    \"from_town\": \"Moscow\"\n}\n</code></pre>"},{"location":"lab_3/endpoints/add_booking/#code-201-created","title":"Code: <code>201 Created</code>","text":""},{"location":"lab_3/endpoints/room_users/","title":"/rooms/{id}/users/{from}/{to}[GET]","text":""},{"location":"lab_3/endpoints/room_users/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u044e\u0437\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438","text":""},{"location":"lab_3/endpoints/room_users/#url-roomsidusersfromto","title":"URL: <code>/rooms/{id}/users/{from}/{to}/</code>","text":""},{"location":"lab_3/endpoints/room_users/#method-get","title":"Method: <code>GET</code>","text":""},{"location":"lab_3/endpoints/room_users/#permissions-isadminuser","title":"Permissions: <code>IsAdminUser</code>","text":""},{"location":"lab_3/endpoints/room_users/#success-response","title":"Success Response:","text":""},{"location":"lab_3/endpoints/room_users/#code-200-ok","title":"Code: <code>200 OK</code>","text":""},{"location":"lab_3/endpoints/room_users/#content-example-request-url-rooms2users2022-04-042024-10-10","title":"Content example (request URL <code>/rooms/2/users/2022-04-04/2024-10-10/</code>):","text":"<pre><code>[\n    {\n        \"email\": \"user@test.com\",\n        \"firstname\": \"test\",\n        \"lastname\": \"user\",\n        \"phone\": \"+7999999999\",\n        \"bookings\": [\n            4\n        ]\n    },\n    {\n        \"email\": \"admin@admim.con\",\n        \"firstname\": \"admin\",\n        \"lastname\": \"admin\",\n        \"phone\": \"\",\n        \"bookings\": [\n            5\n        ]\n    },\n    {\n        \"email\": \"just@man.ru\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"Djoser\",\n        \"phone\": \"89116469049\",\n        \"bookings\": [\n            6\n        ]\n    }\n]\n</code></pre>"},{"location":"lab_3/endpoints/users_town/","title":"users/{from_town}[GET]","text":""},{"location":"lab_3/endpoints/users_town/#_1","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u044e\u0437\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0438\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430","text":""},{"location":"lab_3/endpoints/users_town/#url-usersfrom_town","title":"URL: <code>/users/{from_town}/</code>","text":""},{"location":"lab_3/endpoints/users_town/#method-get","title":"Method: <code>GET</code>","text":""},{"location":"lab_3/endpoints/users_town/#permissions-isauthenticated","title":"Permissions: <code>IsAuthenticated</code>","text":""},{"location":"lab_3/endpoints/users_town/#success-response","title":"Success Response:","text":""},{"location":"lab_3/endpoints/users_town/#code-200-ok","title":"Code: <code>200 OK</code>","text":""},{"location":"lab_3/endpoints/users_town/#content-example-request-url-usersspb","title":"Content example (request URL <code>/users/SPB/</code>):","text":"<pre><code>    [\n    {\n        \"email\": \"game.azog@gmail.com\",\n        \"firstname\": \"Nikita\",\n        \"lastname\": \"Ananiev\",\n        \"phone\": \"89116469049\",\n        \"bookings\": [\n            3,\n            7\n        ]\n    },\n    {\n        \"email\": \"user@test.com\",\n        \"firstname\": \"test\",\n        \"lastname\": \"user\",\n        \"phone\": \"+7999999999\",\n        \"bookings\": [\n            4\n        ]\n    },\n    {\n        \"email\": \"game.azog@gmail.com\",\n        \"firstname\": \"Nikita\",\n        \"lastname\": \"Ananiev\",\n        \"phone\": \"89116469049\",\n        \"bookings\": [\n            3,\n            7\n        ]\n    }\n]\n</code></pre>"},{"location":"lab_4/auth/","title":"authorization","text":""},{"location":"lab_4/auth/#_1","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435:","text":""},{"location":"lab_4/auth/#_2","title":"\u0428\u0430\u0431\u043b\u043e\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>    &lt;div class=\"auth__container\"&gt;\n        &lt;div class=\"auth__form\"&gt;\n            &lt;h1 style=\"text-align: center;\"&gt;\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f&lt;/h1&gt;\n            &lt;form id=\"__auth__form\" @submit.prevent=\"authUser\"&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"email\"&gt;\u042d\u043b. \u043f\u043e\u0447\u0442\u0430&lt;/label&gt;\n                    &lt;input type=\"email\" id=\"__email\" v-model=\"email\" required&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"password\"&gt;\u041f\u0430\u0440\u043e\u043b\u044c&lt;/label&gt;\n                    &lt;input type=\"password\" id=\"__password\" v-model=\"password\" required&gt;\n                &lt;/div&gt;\n                &lt;button type=\"submit\" class=\"auth__button\"&gt;\u0412\u043e\u0439\u0442\u0438&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"lab_4/auth/#_3","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>import axios from \"axios\";\nexport default {\n    name: \"Login\",\n    data() {\n        return {\n            email: \"\",\n            password: \"\",\n        }\n    },\n    methods: {\n        async authUser() {\n            try {\n                const response = await axios.post('http://127.0.0.1:8000/auth/token/login', {\n                    password: this.password,\n                    email: this.email,\n                });\n                console.log(response.data)\n                localStorage.setItem('token', response.data.auth_token);\n                axios.defaults.headers.common['Authorization'] = `Token ${response.data.auth_token}`;\n\n                const response_user = await axios.get('http://127.0.0.1:8000/auth/users/me/');\n                localStorage.setItem('user', JSON.stringify(response_user.data));\n                this.$router.push('/');\n            } catch (e) {\n                if (e.response) {\n                    switch (e.response.status) {\n                        case 401:\n                            console.log('delete token')\n                            delete axios.defaults.headers.common[\"Authorization\"];\n                            break;\n                        default:\n                    }\n                }\n            }\n        }\n    } \n}\n</code></pre>"},{"location":"lab_4/auth/#_4","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430","text":""},{"location":"lab_4/bookings/","title":"bookings","text":""},{"location":"lab_4/bookings/#_1","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":""},{"location":"lab_4/bookings/#_2","title":"\u0428\u0430\u0431\u043b\u043e\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>    &lt;Base/&gt;\n    &lt;DeleteBooking ref=\"del\"/&gt;\n    &lt;UpdateBooking ref=\"upt\"/&gt;\n    &lt;div v-if=\"this.user\" class=\"booking__history__container\"&gt;\n    &lt;h1&gt;\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439&lt;/h1&gt;\n    &lt;table class=\"booking__table\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;ID&lt;/th&gt;\n                &lt;th&gt;\u041d\u043e\u043c\u0435\u0440&lt;/th&gt;\n                &lt;th&gt;\u0414\u0430\u0442\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f&lt;/th&gt;\n                &lt;th&gt;\u0421\u0442\u0430\u0442\u0443\u0441&lt;/th&gt;\n                &lt;th&gt;\u041e\u043f\u043b\u0430\u0442\u0430&lt;/th&gt;\n                &lt;th&gt;\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr v-for=\"booking in bookings\" :key=\"booking.id\"&gt;\n                &lt;td&gt;{{ booking.id }}&lt;/td&gt;\n                &lt;td&gt;{{ booking.room }}&lt;/td&gt;\n                &lt;td&gt;{{ booking.booking_date }}&lt;/td&gt;\n                &lt;td&gt;{{ booking.state }}&lt;/td&gt;\n                &lt;td&gt;{{ booking.payment_status }}&lt;/td&gt;\n                &lt;td v-if=\"booking.state != 'finished'\"&gt;\n                    &lt;a class=\"action__button delete__button\" @click=\"showModalDelete(booking.id)\"&gt;\u0443\u0434\u0430\u043b\u0438\u0442\u044c&lt;/a&gt; \n                    &lt;a class=\"action__button edit__button\" @click=\"showModalUpdate(booking.id)\"&gt;\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c&lt;/a&gt; \n                &lt;/td&gt;\n                &lt;td v-if=\"booking.state == 'finished'\"&gt; \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u043d\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"lab_4/bookings/#3-base-deletebooking-updatebooking-crud","title":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f 3 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b: Base( \u0434\u043b\u044f \u0448\u0430\u043f\u043a\u0438), DeleteBooking \u0438 UpdateBooking (\u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u043a\u043e\u043d \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438)","text":""},{"location":"lab_4/bookings/#_3","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>    import Base from '@/components/Base.vue';\n    import DeleteBooking from '@/components/DeleteBooking.vue';\n    import UpdateBooking from '@/components/UpdateBooking.vue';\n    import axios from 'axios';\n\n    export default {\n        name: 'BookingList',\n        components: {\n            Base, DeleteBooking, UpdateBooking\n        },\n        data() {\n            return {\n                bookings: [],\n                user: {}\n            }\n        },\n        methods: {\n            showModalDelete: function (id) {\n                this.$refs.del.show = true\n                this.$refs.del.bookingId = id\n            },\n            showModalUpdate: function (id) {\n                this.$refs.upt.show = true\n                this.$refs.upt.bookingId = id\n            },\n            async fetchUserBookings () {\n                this.user = JSON.parse(localStorage.getItem('user'));\n                try {\n                    const response = await axios.get(`http://127.0.0.1:8000/users/${this.user.id}/`);\n                    this.bookings = response.data.bookings;\n                    this.bookings.forEach(async (booking) =&gt; {\n                        const room_resp = await axios.get(`http://127.0.0.1:8000/rooms/${booking.room}/`);\n                        booking.room = room_resp.data.number;\n                    });\n                    console.log(this.bookings);\n                } catch (e) {\n                    if (e.response) {\n                        switch (e.response.status) {\n                            case 401:\n                                this.user = {};\n                                break;\n                            default:\n                        }\n                    }\n                }\n            }\n        }, \n        mounted() {\n            this.fetchUserBookings()\n        }\n    }\n</code></pre>"},{"location":"lab_4/bookings/#_4","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439","text":""},{"location":"lab_4/bookings/#_5","title":"\u041c\u043e\u0436\u0435\u043c \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u0442\u044b","text":""},{"location":"lab_4/bookings/#_6","title":"\u041c\u043e\u0436\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0431\u0440\u043e\u043d\u044c","text":""},{"location":"lab_4/main/","title":"main","text":""},{"location":"lab_4/main/#4-vuejs","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u041b\u04204: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js","text":""},{"location":"lab_4/main/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0443\u0447\u0451\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435  \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e (\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c). \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e (\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430)","text":""},{"location":"lab_4/main/#_2","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:","text":"<pre><code>src\n    |   App.vue\n    |   main.js\n    |\n    +---assets\n    |       auth.css\n    |       base.css\n    |       booking.css\n    |       logo.svg\n    |       main.css\n    |       modal.scss\n    |\n    +---components\n    |   |   Base.vue\n    |   |   Booking.vue\n    |   |   BookingList.vue\n    |   |   DeleteBooking.vue\n    |   |   Login.vue\n    |   |   Logout.vue\n    |   |   Main.vue\n    |   |   Register.vue\n    |   |   RoomList.vue\n    |   |   UpdateBooking.vue\n    |   |\n    |   \\---icons\n    |           IconCommunity.vue\n    |           IconDocumentation.vue\n    |           IconEcosystem.vue\n    |           IconSupport.vue\n    |           IconTooling.vue\n    |\n    \\---router\n            index.js\n</code></pre>"},{"location":"lab_4/reg/","title":"registration","text":""},{"location":"lab_4/reg/#_1","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435:","text":""},{"location":"lab_4/reg/#_2","title":"\u0428\u0430\u0431\u043b\u043e\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>&lt;div class=\"auth__container\"&gt;\n        &lt;div class=\"auth__form\"&gt;\n            &lt;h1 style=\"text-align: center;\"&gt;\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f&lt;/h1&gt;\n            &lt;form @submit.prevent=\"registerUser\"&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.email\"&gt;Email&lt;/label&gt;\n                    &lt;input type=\"email\" id=\"__email\" v-model=\"user.email\" required/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.firstname\"&gt;Firstname&lt;/label&gt;\n                    &lt;input type=\"text\" id=\"__firstname\" v-model=\"user.firstname\" required/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.lastname\"&gt;Lastname&lt;/label&gt;\n                    &lt;input type=\"text\" id=\"__lastname\" v-model=\"user.lastname\" required/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.birth_date\"&gt;Birth date&lt;/label&gt;\n                    &lt;input type=\"date\" id=\"__birth_date\" v-model=\"user.birth_date\" required/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.phone\"&gt;Phone&lt;/label&gt;\n                    &lt;input type=\"tel\" id=\"__phone\" placeholder=\"+8 888 888 8888\" pattern=\"\\+[1-9]{1}\\s[0-9]{3}\\s[0-9]{3}\\s[0-9]{4}\" v-model=\"user.phone\" required/&gt;\n                &lt;/div&gt;\n                &lt;div class=\"form__group\"&gt;\n                    &lt;label for=\"user.password\"&gt;Password&lt;/label&gt;\n                    &lt;input type=\"password\" id=\"__password\" v-model=\"user.password\" required/&gt;\n                &lt;/div&gt;\n                &lt;button type=\"submit\" class=\"auth__button\"&gt;Register&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt; \n    &lt;/div&gt;\n</code></pre>"},{"location":"lab_4/reg/#_3","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>import axios from \"axios\";\n\n    export default {\n        name: 'Register',\n        data() {\n            return {\n                user: {\n                    email: '',\n                    firstname: '',\n                    lastname: '',\n                    birth_date: '',\n                    phone: '',\n                    password: '',\n                },\n                confirmPassword : '',\n            }\n        },\n        methods: {\n            async registerUser() {\n                console.log(this.user);\n                try {\n                    await axios.post('http://127.0.0.1:8000/auth/users/', this.user);\n                    this.$router.push('/login');\n                } catch (e) {\n                    if (e.response) {\n                        switch (e.response.status) {\n                            case 401:\n                                break;\n                            default:\n                        }\n                    }\n                }\n            }\n        },\n    }\n</code></pre>"},{"location":"lab_4/reg/#_4","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435","text":""},{"location":"lab_4/room_list/","title":"room_list","text":""},{"location":"lab_4/room_list/#_1","title":"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435:","text":""},{"location":"lab_4/room_list/#_2","title":"\u0428\u0430\u0431\u043b\u043e\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>    &lt;Base /&gt;\n    &lt;Booking :show_list=\"true\" ref=\"create\" @update-state=\"showList\"/&gt;\n    &lt;h1 v-if=\"show_list\" style=\"text-align: center;\"&gt;\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c\u0435\u0440\u043e\u0432&lt;/h1&gt;\n    &lt;div v-if=\"show_list\" class=\"rooms__container\"&gt;\n        &lt;div class=\"room__card\" v-for=\"room in rooms\"&gt;\n            &lt;div&gt;&lt;span style=\"font-size: large; font-weight: bold;\"&gt;\u041d\u043e\u043c\u0435\u0440 {{ room.number }}&lt;/span&gt;&lt;/div&gt;\n            &lt;div&gt;&lt;span&gt;\u041f\u043b\u043e\u0449\u0430\u0434\u044c {{ room.area }}&lt;/span&gt;&lt;/div&gt;\n            &lt;div v-if=\"room.is_occupied\"&gt;\n                &lt;span&gt;\u0417\u0430\u043d\u044f\u0442 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442&lt;/span&gt; &lt;br&gt;\n                &lt;button class=\"book__button\"  @click=\"showBooking(room.id)\"&gt;\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c&lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div v-if=\"!room.is_occupied\"&gt;\n                &lt;span&gt;\u0421\u0432\u043e\u0431\u043e\u0434\u0435\u043d&lt;/span&gt; &lt;br&gt;\n                &lt;button class=\"book__button\" @click=\"showBooking(room.id)\"&gt;\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"lab_4/room_list/#base-booking","title":"\u0412 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Base (\u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0448\u0430\u043f\u043a\u0438) \u0438 Booking, \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430.","text":""},{"location":"lab_4/room_list/#_3","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>import axios from \"axios\";\nimport Base from '@/components/Base.vue'\nimport Booking from \"@/components/Booking.vue\";\n\nexport default {\n    components: {\n        Base, Booking\n    },\n    name: \"Rooms\",\n    data() {\n        return {\n            rooms: [],\n            show_list: true,\n        }\n    },\n    methods: {\n        showBooking: function (id) {\n            const user = JSON.parse(localStorage.getItem('user'));\n            if (user) {\n                this.$refs.create.show = true\n                this.$refs.create.booking.room = id\n                this.show_list = false\n            } else {\n                this.$router.push('/login');\n            }\n\n        },\n        showList() {\n            this.$refs.create.show = false\n            this.show_list = true\n        },\n        async fetchRoomList () {\n            try {\n                const response = await axios.get('http://127.0.0.1:8000/rooms/list/');\n                this.rooms = response.data\n            } catch (e) {\n                if (e.response) {\n                    switch (e.response.status) {\n                        case 404:\n                            break;\n                        default:\n                            alert('\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430!');\n                    } \n                } else if (e.request) {\n                    alert('\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430!');\n                }\n            }\n        }\n    },\n    mounted() {\n        this.fetchRoomList() \n    }\n}\n</code></pre>"},{"location":"lab_4/room_list/#_4","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u0432","text":""},{"location":"lab_4/room_list/#_5","title":"\u041d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""}]}